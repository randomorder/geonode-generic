version: '2'
services:
  db:
    image: geosolutionsit/postgis-docker:9.6
    restart: unless-stopped
    container_name: db4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
      org.geonode.component: db
      org.geonode.instance.name: geonode
      io.rancher.container.pull_image: always
    volumes:
      - dbdata:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    environment:
      GEONODE_DATABASE: geonode
      GEONODE_DATABASE_PASSWORD: geonode
      GEONODE_GEODATABASE: geonode_data
      GEONODE_GEODATABASE_PASSWORD: geonode_data

  django:
    restart: unless-stopped
    image: geosolutionsit/geonode-generic:1.0
    container_name: django4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
      org.geonode.component: django
      org.geonode.instance.name: geonode
      io.rancher.container.pull_image: always
    depends_on:
      - db
      - restore
    command: uwsgi --ini /usr/src/app/uwsgi.ini
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - statics:/mnt/volumes/statics
    environment:
       GEONODE_INSTANCE_NAME: geonode
       GEONODE_LB_HOST_IP:
       GEONODE_LB_PORT:
       DATABASE_URL: postgres://postgres:postgres@db:5432/postgres
       DEFAULT_BACKEND_DATASTORE: datastore
       GEONODE_DATABASE: geonode
       GEONODE_DATABASE_PASSWORD: geonode
       GEONODE_GEODATABASE: geonode_data
       GEONODE_GEODATABASE_PASSWORD: geonode_data
       # BROKER_URL: amqp://guest:guest@rabbitmq:5672/
       DJANGO_SETTINGS_MODULE: geonode_generic.settings
       ALLOWED_HOSTS: []
       DOCKER_ENV: production
       UWSGI_CMD: uwsgi --ini /usr/src/app/uwsgi.ini
       IS_CELERY: False
       C_FORCE_ROOT: 1
       SITEURL: ${SITEURL}
       # replaced with defaults in settings
       GEOSERVER_PUBLIC_LOCATION: ${SITEURL}/geoserver/
       GEOSERVER_LOCATION: http://geoserver:8080/geoserver/
       STATIC_ROOT: /mnt/volumes/statics/static/
       MEDIA_ROOT: /mnt/volumes/statics/uploaded/
       GEOIP_PATH: /mnt/volumes/statics/geoip.db
       ALLOWED_HOSTS: ${ALLOWED_HOSTS}
       ADMIN_EMAILS: ${ADMIN_EMAILS}
       # mind that following lines are rancher-specific
       RANCHER_STACK: {{ .Stack.Name }}
       RANCHER_ENV: {{ .Environment.Name }}
       GEOSERVER_ADMIN_PASSWORD: ${GEOSERVER_ADMIN_PASSWORD}
       # See https://github.com/geosolutions-it/geonode-generic/issues/28
       # to see why we force API version to 1.24
       DOCKER_API_VERSION: "1.24"

  geoserver:
    image: geosolutionsit/geoserver-docker:2.12.x
    restart: unless-stopped
    container_name: geoserver4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: geoserver
        org.geonode.instance.name: geonode
        io.rancher.container.pull_image: always
    depends_on:
      - db
      - data-dir-conf
      - restore
    volumes:
      - geoserver-data-dir:/geoserver_data/data
    environment:
      GEOSERVER_ADMIN_PASSWORD: ${GEOSERVER_ADMIN_PASSWORD}
      DOCKERHOST:
      DOCKER_HOST_IP:
      GEONODE_HOST_IP:
      NGINX_BASE_URL: ${SITEURL}

  geonode:
    image: geosolutionsit/nginx-geonode:latest
    restart: unless-stopped
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: nginx
        org.geonode.instance.name: geonode
        io.rancher.container.pull_image: always
    depends_on:
      - django
      - geoserver
      - restore
    ports:
      - "${NGINX_PORT_MAPPING}"
    volumes:
      - statics:/mnt/volumes/statics
    environment:
      ENABLE_HTTPS: {{ .Values.ENABLE_HTTPS }}
      NGINX_HOST: "${SITEURL}"


  data-dir-conf:
    image: geosolutionsit/geoserver_data:2.12.x
    restart: on-failure
    container_name: gsconf4${COMPOSE_PROJECT_NAME}
    labels:
        org.geonode.component: conf
        org.geonode.instance.name: geonode
        io.rancher.container.pull_image: always
    command: /bin/true
    volumes:
      - geoserver-data-dir:/geoserver_data/data

  backup:
    image: geosolutionsit/geonode-backup:latest
    restart: unless-stopped
    container_name: backup4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: backup
        org.geonode.instance.name: geonode
    depends_on:
      - django
      - geoserver
      - db
    volumes:
      - statics:/mnt/volumes/statics/
      - geoserver-data-dir:/mnt/volumes/data/
      - dbbackups:/mnt/volumes/backups/
    environment:
      # mind that following lines are rancher-specific
      RANCHER_STACK: {{ .Stack.Name }}
      RANCHER_ENV: {{ .Environment.Name }}
      PGUSER: postgres
      PGHOST: db

  restore:
    image: geosolutionsit/geonode-restore:latest
    restart: unless-stopped
    container_name: restore4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: restore
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - data-dir-conf
    volumes:
      - statics:/mnt/volumes/statics/
      - geoserver-data-dir:/mnt/volumes/data/
      - dbbackups:/mnt/volumes/backups/
    environment:
      # mind that following lines are rancher-specific
      RANCHER_STACK: {{ .Stack.Name }}
      RANCHER_ENV: {{ .Environment.Name }}
      PGUSER: postgres
      PGHOST: db


volumes:
  geoserver-data-dir:
#    name: ${COMPOSE_PROJECT_NAME}-gsdatadir
  dbdata:
#    name: ${COMPOSE_PROJECT_NAME}-dbdata
  dbbackups:
     driver: ${BACKUPS_VOLUME_DRIVER}
     external: {{ .Values.BACKUPS_VOLUME_EXTERNAL }}
#    name: ${COMPOSE_PROJECT_NAME}-dbbackups
  statics:
#    name: ${COMPOSE_PROJECT_NAME}-statics
